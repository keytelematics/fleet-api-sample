/**
 * Fleet API Specification
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * The version of the OpenAPI document: 2.2.8
 * Contact: support@keytelematics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CompanyAddress } from './companyAddress';
import { CompanyMessages } from './companyMessages';
import { CompanySupportDetails } from './companySupportDetails';
import { CustomFieldDefinition } from './customFieldDefinition';
import { EntityInfo } from './entityInfo';
import { IdName } from './idName';
import { IdNameState } from './idNameState';
import { OpenIdConnectIssuer } from './openIdConnectIssuer';
import { SoftLimits } from './softLimits';
import { ThemeInfo } from './themeInfo';

export class DistributorCreateRequest {
    /**
    * The display name of the company
    */
    'name'?: string | null;
    /**
    * A list of custom ID\'s for this company. Can be queried using the getClientByTag, getVendorByTag and getDistributorByTag methods.
    */
    'tags'?: Array<string> | null;
    /**
    * The company website (if available)
    */
    'website'?: string | null;
    /**
    * The state of this company
    */
    'state'?: DistributorCreateRequest.StateEnum;
    'entity'?: EntityInfo;
    'limits'?: SoftLimits;
    'flags'?: { [key: string]: { [key: string]: object; }; };
    'theme'?: ThemeInfo;
    'address'?: CompanyAddress;
    /**
    * The default timezone for this company
    */
    'timeZoneId'?: string | null;
    'customFields'?: { [key: string]: Array<CustomFieldDefinition>; };
    /**
    * A list of custom domains to use for this company
    */
    'domains'?: Array<string> | null;
    /**
    * The default language to user for this client.
    */
    'language'?: string | null;
    'support'?: CompanySupportDetails;
    'messages'?: CompanyMessages;
    'oidc'?: { [key: string]: OpenIdConnectIssuer; };
    'emailProvider'?: IdNameState;
    /**
    * [DEPRECATED] Use the listCompanyGroups operation instead
    */
    'vendorGroups'?: Array<IdName> | null;
    'features'?: { [key: string]: object; };
    /**
    * A list of maps sets that are available to this distributor
    */
    'availableMapSets'?: Array<IdName> | null;
    /**
    * A list of email providers that are available to this distributor
    */
    'availableEmailProviders'?: Array<IdNameState> | null;
    'ownerId': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<string>"
        },
        {
            "name": "website",
            "baseName": "website",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "DistributorCreateRequest.StateEnum"
        },
        {
            "name": "entity",
            "baseName": "entity",
            "type": "EntityInfo"
        },
        {
            "name": "limits",
            "baseName": "limits",
            "type": "SoftLimits"
        },
        {
            "name": "flags",
            "baseName": "flags",
            "type": "{ [key: string]: { [key: string]: object; }; }"
        },
        {
            "name": "theme",
            "baseName": "theme",
            "type": "ThemeInfo"
        },
        {
            "name": "address",
            "baseName": "address",
            "type": "CompanyAddress"
        },
        {
            "name": "timeZoneId",
            "baseName": "timeZoneId",
            "type": "string"
        },
        {
            "name": "customFields",
            "baseName": "customFields",
            "type": "{ [key: string]: Array<CustomFieldDefinition>; }"
        },
        {
            "name": "domains",
            "baseName": "domains",
            "type": "Array<string>"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        },
        {
            "name": "support",
            "baseName": "support",
            "type": "CompanySupportDetails"
        },
        {
            "name": "messages",
            "baseName": "messages",
            "type": "CompanyMessages"
        },
        {
            "name": "oidc",
            "baseName": "oidc",
            "type": "{ [key: string]: OpenIdConnectIssuer; }"
        },
        {
            "name": "emailProvider",
            "baseName": "emailProvider",
            "type": "IdNameState"
        },
        {
            "name": "vendorGroups",
            "baseName": "vendorGroups",
            "type": "Array<IdName>"
        },
        {
            "name": "features",
            "baseName": "features",
            "type": "{ [key: string]: object; }"
        },
        {
            "name": "availableMapSets",
            "baseName": "availableMapSets",
            "type": "Array<IdName>"
        },
        {
            "name": "availableEmailProviders",
            "baseName": "availableEmailProviders",
            "type": "Array<IdNameState>"
        },
        {
            "name": "ownerId",
            "baseName": "ownerId",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return DistributorCreateRequest.attributeTypeMap;
    }
}

export namespace DistributorCreateRequest {
    export enum StateEnum {
        Inactive = <any> 'inactive',
        Active = <any> 'active',
        Suspended = <any> 'suspended',
        Deleted = <any> 'deleted'
    }
}
