/**
 * Fleet API Specification
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * The version of the OpenAPI document: 2.2.8
 * Contact: support@keytelematics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class MapSetLayer {
    /**
    * The name of the map layer
    */
    'name': string;
    /**
    * The projection of the map
    */
    'projection': string;
    /**
    * The minimum zoom level supported by this map layer
    */
    'minZoom': number;
    /**
    * The maximum zoom level supported by this map layer
    */
    'maxZoom': number;
    /**
    * The map server type
    */
    'serverType': MapSetLayer.ServerTypeEnum;
    /**
    * The order of the layer amongst it\'s peers
    */
    'order': number;
    /**
    * The image type of the map tiles
    */
    'imageType': MapSetLayer.ImageTypeEnum;
    /**
    * The name of the layer to present to the map server
    */
    'layerName': string;
    /**
    * A list of map server urls
    */
    'servers': Array<string>;
    /**
    * An optional list of layers to overlay on this layer
    */
    'overlays': Array<MapSetLayer>;
    /**
    * The source attribution text to overlay on this map layer
    */
    'attribution'?: string | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "projection",
            "baseName": "projection",
            "type": "string"
        },
        {
            "name": "minZoom",
            "baseName": "minZoom",
            "type": "number"
        },
        {
            "name": "maxZoom",
            "baseName": "maxZoom",
            "type": "number"
        },
        {
            "name": "serverType",
            "baseName": "serverType",
            "type": "MapSetLayer.ServerTypeEnum"
        },
        {
            "name": "order",
            "baseName": "order",
            "type": "number"
        },
        {
            "name": "imageType",
            "baseName": "imageType",
            "type": "MapSetLayer.ImageTypeEnum"
        },
        {
            "name": "layerName",
            "baseName": "layerName",
            "type": "string"
        },
        {
            "name": "servers",
            "baseName": "servers",
            "type": "Array<string>"
        },
        {
            "name": "overlays",
            "baseName": "overlays",
            "type": "Array<MapSetLayer>"
        },
        {
            "name": "attribution",
            "baseName": "attribution",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return MapSetLayer.attributeTypeMap;
    }
}

export namespace MapSetLayer {
    export enum ServerTypeEnum {
        Google = <any> 'google',
        Wms = <any> 'wms',
        Osm = <any> 'osm',
        Wmts = <any> 'wmts',
        Dds = <any> 'dds',
        Tms = <any> 'tms',
        Mbs = <any> 'mbs'
    }
    export enum ImageTypeEnum {
        Png = <any> 'png',
        Jpg = <any> 'jpg',
        Jpeg = <any> 'jpeg',
        Gif = <any> 'gif',
        Mvt = <any> 'mvt'
    }
}
