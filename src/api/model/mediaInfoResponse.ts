/**
 * Fleet API Specification
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * The version of the OpenAPI document: 2.2.8
 * Contact: support@keytelematics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { EntityInfo } from './entityInfo';
import { IdName } from './idName';
import { IdNameType } from './idNameType';

/**
* Information about a media item
*/
export class MediaInfoResponse {
    /**
    * The internal ID of the media item
    */
    'id': string;
    'owner': IdName;
    'asset': IdName;
    'requester': IdNameType;
    /**
    * The MIME type of this media
    */
    'mimeType': string;
    /**
    * The filename of the media item
    */
    'filename': string;
    /**
    * The camera input from which this media was recorded
    */
    'input': string;
    /**
    * The ISO date at which this media was started
    */
    'date': string;
    /**
    * The duration of the media item
    */
    'duration': number;
    /**
    * The status of the media item
    */
    'status': MediaInfoResponse.StatusEnum;
    /**
    * The UUID of an event that is linked to this media item
    */
    'eventId': string;
    /**
    * The class of the event that is linked to this media item
    */
    'eventClass': string;
    /**
    * The type of the event that is linked to this media item
    */
    'eventType': string;
    /**
    * The latitude where this event was triggered
    */
    'lat': number;
    /**
    * The longitude where this event was triggered
    */
    'lon': number;
    /**
    * The geocoded address of where this event was triggered
    */
    'address': string;
    /**
    * a list of custom field values attached to this event
    */
    'fields': object;
    /**
    * The name of the device provider that handled this media item
    */
    'provider': string;
    /**
    * The progress of media retrieval (not all devices support this property)
    */
    'progress': number;
    'entity': EntityInfo;
    /**
    * Device specific information about this media item
    */
    'data'?: object | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "owner",
            "baseName": "owner",
            "type": "IdName"
        },
        {
            "name": "asset",
            "baseName": "asset",
            "type": "IdName"
        },
        {
            "name": "requester",
            "baseName": "requester",
            "type": "IdNameType"
        },
        {
            "name": "mimeType",
            "baseName": "mimeType",
            "type": "string"
        },
        {
            "name": "filename",
            "baseName": "filename",
            "type": "string"
        },
        {
            "name": "input",
            "baseName": "input",
            "type": "string"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "string"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "number"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "MediaInfoResponse.StatusEnum"
        },
        {
            "name": "eventId",
            "baseName": "eventId",
            "type": "string"
        },
        {
            "name": "eventClass",
            "baseName": "eventClass",
            "type": "string"
        },
        {
            "name": "eventType",
            "baseName": "eventType",
            "type": "string"
        },
        {
            "name": "lat",
            "baseName": "lat",
            "type": "number"
        },
        {
            "name": "lon",
            "baseName": "lon",
            "type": "number"
        },
        {
            "name": "address",
            "baseName": "address",
            "type": "string"
        },
        {
            "name": "fields",
            "baseName": "fields",
            "type": "object"
        },
        {
            "name": "provider",
            "baseName": "provider",
            "type": "string"
        },
        {
            "name": "progress",
            "baseName": "progress",
            "type": "number"
        },
        {
            "name": "entity",
            "baseName": "entity",
            "type": "EntityInfo"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "object"
        }    ];

    static getAttributeTypeMap() {
        return MediaInfoResponse.attributeTypeMap;
    }
}

export namespace MediaInfoResponse {
    export enum StatusEnum {
        Queued = <any> 'queued',
        Pending = <any> 'pending',
        Uploading = <any> 'uploading',
        Available = <any> 'available',
        Downloading = <any> 'downloading',
        Processing = <any> 'processing',
        Ready = <any> 'ready',
        Failed = <any> 'failed',
        Unavailable = <any> 'unavailable'
    }
}
