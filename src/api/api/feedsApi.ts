/**
 * Fleet API Specification
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * The version of the OpenAPI document: 2.2.8
 * Contact: support@keytelematics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { AuditEventFeedResponse } from '../model/auditEventFeedResponse';
import { EventCommentRequest } from '../model/eventCommentRequest';
import { EventFeedResponse } from '../model/eventFeedResponse';
import { EventResponse } from '../model/eventResponse';
import { ForbiddenError } from '../model/forbiddenError';
import { NotificationFeedResponse } from '../model/notificationFeedResponse';
import { TelemetryFeedResponse } from '../model/telemetryFeedResponse';
import { TooManyRequestsError } from '../model/tooManyRequestsError';
import { TripFeedResponse } from '../model/tripFeedResponse';
import { UnexpectedError } from '../model/unexpectedError';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost/fleet/v2';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum FeedsApiApiKeys {
    access_token,
}

export class FeedsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'access_token': new ApiKeyAuth('header', 'x-access-token'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: FeedsApiApiKeys, value: string) {
        (this.authentications as any)[FeedsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Retrieve an alert feed for the specified asset.
     * @param client The client id you are requesting data for
     * @param alert The alert id you wish to comment on.
     * @param request 
     */
    public async acknowledgeAlert (client: string, alert: string, request: EventCommentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EventResponse;  }> {
        const localVarPath = this.basePath + '/data/feeds/alerts/{client}/acknowledge/{alert}'
            .replace('{' + 'client' + '}', encodeURIComponent(String(client)))
            .replace('{' + 'alert' + '}', encodeURIComponent(String(alert)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'client' is not null or undefined
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling acknowledgeAlert.');
        }

        // verify required parameter 'alert' is not null or undefined
        if (alert === null || alert === undefined) {
            throw new Error('Required parameter alert was null or undefined when calling acknowledgeAlert.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling acknowledgeAlert.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(request, "EventCommentRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.access_token.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.access_token.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EventResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "EventResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve an alert feed for the specified asset.
     * @param client The client id you are requesting data for
     * @param alert The alert id you wish to comment on.
     * @param request 
     */
    public async commentAlert (client: string, alert: string, request: EventCommentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EventResponse;  }> {
        const localVarPath = this.basePath + '/data/feeds/alerts/{client}/comment/{alert}'
            .replace('{' + 'client' + '}', encodeURIComponent(String(client)))
            .replace('{' + 'alert' + '}', encodeURIComponent(String(alert)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'client' is not null or undefined
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling commentAlert.');
        }

        // verify required parameter 'alert' is not null or undefined
        if (alert === null || alert === undefined) {
            throw new Error('Required parameter alert was null or undefined when calling commentAlert.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling commentAlert.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(request, "EventCommentRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.access_token.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.access_token.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EventResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "EventResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve an alert feed for the specified asset.
     * @param client The client id you are requesting data for
     * @param sequence The sequence to continue from.
     * @param direction The direction to run the feed in.
     * @param limit Limit the number of results to this value. This function may return slightly more results than requested.
     * @param asset Filter alerts for this asset only.
     * @param alert Filter alerts for this alert only.
     */
    public async getAlertFeed (client: string, sequence: number, direction: 'forward' | 'backward', limit?: number, asset?: string, alert?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EventFeedResponse;  }> {
        const localVarPath = this.basePath + '/data/feeds/alerts/{client}'
            .replace('{' + 'client' + '}', encodeURIComponent(String(client)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'client' is not null or undefined
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling getAlertFeed.');
        }

        // verify required parameter 'sequence' is not null or undefined
        if (sequence === null || sequence === undefined) {
            throw new Error('Required parameter sequence was null or undefined when calling getAlertFeed.');
        }

        // verify required parameter 'direction' is not null or undefined
        if (direction === null || direction === undefined) {
            throw new Error('Required parameter direction was null or undefined when calling getAlertFeed.');
        }

        if (sequence !== undefined) {
            localVarQueryParameters['sequence'] = ObjectSerializer.serialize(sequence, "number");
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "'forward' | 'backward'");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (asset !== undefined) {
            localVarQueryParameters['asset'] = ObjectSerializer.serialize(asset, "string");
        }

        if (alert !== undefined) {
            localVarQueryParameters['alert'] = ObjectSerializer.serialize(alert, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.access_token.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.access_token.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EventFeedResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "EventFeedResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve an audit log feed for the specified client and entity.
     * @param company The client, vendor or distributor id you are requesting data for
     * @param entity 
     * @param sequence The sequence to continue from.
     * @param direction The direction to run the feed in.
     * @param limit Limit the number of results to this value.
     */
    public async getAuditFeedForEntity (company: string, entity: string, sequence: number, direction: 'forward' | 'backward', limit: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AuditEventFeedResponse;  }> {
        const localVarPath = this.basePath + '/data/feeds/audit/{company}/entity/{entity}'
            .replace('{' + 'company' + '}', encodeURIComponent(String(company)))
            .replace('{' + 'entity' + '}', encodeURIComponent(String(entity)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'company' is not null or undefined
        if (company === null || company === undefined) {
            throw new Error('Required parameter company was null or undefined when calling getAuditFeedForEntity.');
        }

        // verify required parameter 'entity' is not null or undefined
        if (entity === null || entity === undefined) {
            throw new Error('Required parameter entity was null or undefined when calling getAuditFeedForEntity.');
        }

        // verify required parameter 'sequence' is not null or undefined
        if (sequence === null || sequence === undefined) {
            throw new Error('Required parameter sequence was null or undefined when calling getAuditFeedForEntity.');
        }

        // verify required parameter 'direction' is not null or undefined
        if (direction === null || direction === undefined) {
            throw new Error('Required parameter direction was null or undefined when calling getAuditFeedForEntity.');
        }

        // verify required parameter 'limit' is not null or undefined
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getAuditFeedForEntity.');
        }

        if (sequence !== undefined) {
            localVarQueryParameters['sequence'] = ObjectSerializer.serialize(sequence, "number");
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "'forward' | 'backward'");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.access_token.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.access_token.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AuditEventFeedResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "AuditEventFeedResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve an event feed for the specified asset.
     * @param client The client id you are requesting data for
     * @param sequence The sequence to continue from.
     * @param direction The direction to run the feed in.
     * @param limit Limit the number of results to this value.
     * @param asset Filter events for this asset only.
     */
    public async getEventFeed (client: string, sequence: number, direction: 'forward' | 'backward', limit?: number, asset?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EventFeedResponse;  }> {
        const localVarPath = this.basePath + '/data/feeds/events/{client}'
            .replace('{' + 'client' + '}', encodeURIComponent(String(client)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'client' is not null or undefined
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling getEventFeed.');
        }

        // verify required parameter 'sequence' is not null or undefined
        if (sequence === null || sequence === undefined) {
            throw new Error('Required parameter sequence was null or undefined when calling getEventFeed.');
        }

        // verify required parameter 'direction' is not null or undefined
        if (direction === null || direction === undefined) {
            throw new Error('Required parameter direction was null or undefined when calling getEventFeed.');
        }

        if (sequence !== undefined) {
            localVarQueryParameters['sequence'] = ObjectSerializer.serialize(sequence, "number");
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "'forward' | 'backward'");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (asset !== undefined) {
            localVarQueryParameters['asset'] = ObjectSerializer.serialize(asset, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.access_token.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.access_token.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EventFeedResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "EventFeedResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the current state for all assets for the specified client.
     * @param client The client id you\&#39;re requesting data for.
     * @param sequence The sequence to continue from.
     * @param offset 
     * @param limit Limit the number of results to this value.
     * @param sort 
     * @param filter 
     */
    public async getLocationFeed (client: string, sequence: number, offset?: number, limit?: number, sort?: string, filter?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TelemetryFeedResponse;  }> {
        const localVarPath = this.basePath + '/data/feeds/location/{client}'
            .replace('{' + 'client' + '}', encodeURIComponent(String(client)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'client' is not null or undefined
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling getLocationFeed.');
        }

        // verify required parameter 'sequence' is not null or undefined
        if (sequence === null || sequence === undefined) {
            throw new Error('Required parameter sequence was null or undefined when calling getLocationFeed.');
        }

        if (sequence !== undefined) {
            localVarQueryParameters['sequence'] = ObjectSerializer.serialize(sequence, "number");
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.access_token.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.access_token.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TelemetryFeedResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "TelemetryFeedResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the notification feed for the current user.
     * @param sequence The sequence to continue from.
     * @param direction The direction to run the feed in.
     * @param limit Limit the number of results to this value.
     */
    public async getNotificationFeed (sequence: number, direction: 'forward' | 'backward', limit?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: NotificationFeedResponse;  }> {
        const localVarPath = this.basePath + '/data/feeds/notifications';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sequence' is not null or undefined
        if (sequence === null || sequence === undefined) {
            throw new Error('Required parameter sequence was null or undefined when calling getNotificationFeed.');
        }

        // verify required parameter 'direction' is not null or undefined
        if (direction === null || direction === undefined) {
            throw new Error('Required parameter direction was null or undefined when calling getNotificationFeed.');
        }

        if (sequence !== undefined) {
            localVarQueryParameters['sequence'] = ObjectSerializer.serialize(sequence, "number");
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "'forward' | 'backward'");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.access_token.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.access_token.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: NotificationFeedResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "NotificationFeedResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve a trip feed for the specified asset.
     * @param client The client id you are requesting data for
     * @param sequence The sequence to continue from.
     * @param direction The direction to run the feed in.
     * @param limit Limit the number of results to this value.
     * @param asset 
     */
    public async getTripFeed (client: string, sequence: number, direction: 'forward' | 'backward', limit?: number, asset?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TripFeedResponse;  }> {
        const localVarPath = this.basePath + '/data/feeds/trips/{client}'
            .replace('{' + 'client' + '}', encodeURIComponent(String(client)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'client' is not null or undefined
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling getTripFeed.');
        }

        // verify required parameter 'sequence' is not null or undefined
        if (sequence === null || sequence === undefined) {
            throw new Error('Required parameter sequence was null or undefined when calling getTripFeed.');
        }

        // verify required parameter 'direction' is not null or undefined
        if (direction === null || direction === undefined) {
            throw new Error('Required parameter direction was null or undefined when calling getTripFeed.');
        }

        if (sequence !== undefined) {
            localVarQueryParameters['sequence'] = ObjectSerializer.serialize(sequence, "number");
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "'forward' | 'backward'");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (asset !== undefined) {
            localVarQueryParameters['asset'] = ObjectSerializer.serialize(asset, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.access_token.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.access_token.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TripFeedResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "TripFeedResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
